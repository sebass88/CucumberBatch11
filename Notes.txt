Framework -

it gives us organized structure
Proper folder heirarchy
single execution point
separate place for different code


We use maven as build management tool

group id - company name
artifact id - project name

main folder - for development code
test folder - for testing code
        -- java - for coding part
        -- resources for non-coding part

pom.xml -- to add dependency
it is a configuration file which is considered as a backbone of the maven project

Cucumber -- It supports behavioral driven development approach wherein we write our test cases specification in
            gherkin language (plain english).

         Keywords: features, background, scenario,

         Given - pre condition - Given user is navigated to the HRMS application
         When - Actions -- When the user enters username and password
         And - -- this tag can come with every other keyword -- And user click on login button
         Then -- expected output - result - Then user should be able to see dashboard page


Recap :

Maven - build management tool

test - here we write code for testing
    -- java - coding stuff
    -- resources - non coding stuff

         Given - pre condition - Given user is navigated to the HRMS application
         When - Actions -- When the user enters username and password
         And - -- this tag can come with every other keyword -- And user click on login button
         Then -- expected output - result - Then user should be able to see dashboard page
         Feature -- .feature -- to write scenario we use feature file
         scenario --

User story 12345 - Admin should be able to search an employee in HRMS application

Acceptance criteria:
    1 search by id
    2 search by name

23638000
XYZT

1.
Given user opens browser and navigated to HRMS
And user is logged in  as an admin
And user is on employee list page
When user enters valid employee id
And user clicks on search button
Then user see employee in the employee table

2.
Given user opens browser and navigated to HRMS
And user is logged in  as an admin
And user is on employee list page
When user enters firstname and lastname
And user clicks on search button
Then user see employee in the employee table



Login feature

Class 3
Recap

.To increase transparency /to reduce communication gap
.It supports BDD(Gherkin language - easy to understand for non-technical people also
.It focuses on end user

Feature File - to write test scenarios

keywords
Given= Pre Condition
When= Perform actions
And= supporting tag
Then= result

Step definition - to implement the code for the steps written in feature file, we use step definitions

Runner class -

features,
glue,
dryrun
monochrome
tags
plugins
strict

background - it applicable only for one feature file, here we add common steps among all the scenarios

Class 4

Recap

Runner class - to compare the execution flow of our test cases

@runwith- from junit
@cucumberoptions- to provide configurations

features- path of my feature files

glue- path of the step definitions for feature files

dryrun- if it is set to true , if stops actual execution and provides the missing steps snippet

momochrome- it removes unreadable character and cleans the console

tags- for grouping

plugins- for report generation and other purposes

background- to put steps among all the scenarios from single file feature file we use background

Hooks we use hooks to provide pre conditions and post conditions
we should provide hooks under the package where my steps are available

Hooks vs Background-

Background = it is applicable to one feature file
hooks= it is application to all the feature files


Class 5-

Hooks-
before and after = pre condition and post condition

Passing the data
passing the data directly from the feature file -scenario
passing the data from @examples table from scenario outline to achieve ddt
from data table

data table vs examples
data table is application to just a single step
example table is applicable to complete scenario

Class 6-
this framework supports BDD and DDT


Class 7

recap-

Page object model design pattern-

it allows us to create classes according to the pages available in the application
we place all locators and functions related to this